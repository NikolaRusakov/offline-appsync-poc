service: serverless-graphql-appsync-dynamo

frameworkVersion: ">=1.21.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1

plugins:
#  - serverless-plugin-typescript
  - serverless-webpack
  - serverless-appsync-plugin
  - serverless-dynamodb-local
  - serverless-appsync-offline
  - serverless-offline


functions:
  graphql:
    handler: handler.graphqlHandler

  getComments:
    name: getComments
    handler: handler.getComments
    description: Get programs
    events:
      - http:
          path: getComments
          method: get
          integration: lambda
  playground:
    handler: playground-handlers.playgroundHandler
    events:
      - http:
          path: playground
          method: get
          cors: true
  getArticles:
    name: getArticles
    handler: handler.getArticles
    description: Get articles
    events:
      - http:
          path: getArticles
          method: post
          integration: lambda
          request:
            template:
              application/json: '{ "arguments" : "$context.body.arguments" }'

custom:
  appsync-emulator:
    # when using serverless-webpack it (by default) outputs all the build assets to `<projectRoot>/.webpack/service`
    # this will let appsync-offline know where to find those compiled files
    buildPrefix: .webpack/service
  appsync-offline:
    port: 62222
    dynamodb:
      client:
        endpoint: "http://localhost:8000"
        region: localhost
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      test:
        sources:
          - table: Users
            sources: [seed-data/Users.json]	
          - table: Tweets
            sources: [seed-data/Tweets.json]
  appSync:
    name: dynamodbDemo # defaults to api
#    authenticationType: API_KEY # API_KEY is also supported
    authenticationType: AMAZON_COGNITO_USER_POOLS # API_KEY is also supported
    userPoolConfig:
      awsRegion: us-east-1 # required # region
      defaultAction: ALLOW
      userPoolId: {Ref: CognitoUserPoolUsers}
    # region: # defaults to provider region
    # mappingTemplatesLocation: # defaults to mapping-templates
    mappingTemplates:
      - dataSource: getComments
        type: Query
        field: getComments
        request: get-programs.request.vtl
        response: default.response.vtl
      - dataSource: Users
        type: Query
        field: getUserInfo
        request: "getUserInfo-request-mapping-template.txt"
        response: "getUserInfo-response-mapping-template.txt"
      - dataSource: Users
        type: Query
        field: meInfo
        request: "meInfo-request-mapping-template.txt"
        response: "meInfo-response-mapping-template.txt"
      - dataSource: Tweets
        type: User
        field: topTweet
        request: "topTweet-request-mapping-template.txt"
        response: "topTweet-response-mapping-template.txt"
      - dataSource: Tweets
        type: User
        field: tweets
        request: "tweets-request-mapping-template.txt"
        response: "tweets-response-mapping-template.txt"
      - dataSource: Tweets
        type: Mutation
        field: createTweet
        request: "createTweet-request-mapping-template.txt"
        response: "createTweet-response-mapping-template.txt"
      - dataSource: Tweets
        type: Mutation
        field: deleteTweet
        request: "deleteTweet-request-mapping-template.txt"
        response: "deleteTweet-response-mapping-template.txt"
      - dataSource: Tweets
        type: Mutation
        field: reTweet
        request: "reTweet-request-mapping-template.txt"
        response: "reTweet-response-mapping-template.txt"
      - dataSource: Tweets
        type: Mutation
        field: updateTweet
        request: "updateTweet-request-mapping-template.txt"
        response: "updateTweet-response-mapping-template.txt"
      - dataSource: Users
        type: Mutation
        field: updateUserInfo
        request: "updateUserInfo-request-mapping-template.txt"
        response: "updateUserInfo-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getUserInfo
        request: "getUserInfo-request-mapping-template.txt"
        response: "getUserInfo-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: meInfo
        request: "meInfo-request-mapping-template.txt"
        response: "meInfo-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: createTweet
        request: "createTweet-request-mapping-template.txt"
        response: "createTweet-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: deleteTweet
        request: "deleteTweet-request-mapping-template.txt"
        response: "deleteTweet-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: reTweet
        request: "reTweet-request-mapping-template.txt"
        response: "reTweet-response-mapping-template.txt"
    # schema: # defaults schema.graphql
    serviceRole: "AppSyncServiceRole"
#      dataSources:
#        - type: AWS_LAMBDA
#          name: Lambda
#          description: 'Lambda DataSource'
#          config:
#            lambdaFunctionArn: "arn:aws:lambda:us-east-1:${self:custom.accountId}:function:serverless-graphql-appsync-lda-production-graphql"
#            serviceRoleArn: "arn:aws:iam::${self:custom.accountId}:role/Lambda-${self:custom.appSync.serviceRole}"

    # schema: # defaults schema.graphql
    #serviceRole: # if not provided, a default role is generated
    dataSources:
      - type: AWS_LAMBDA
        name: getComments
        description: 'Get programs from Contentful'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [GetProgramsLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncServiceRole, Arn] }
          functionName: getComments
      - type: AMAZON_DYNAMODB
        name: Users
        description: 'Users table'
        config:
          tableName: 'Users'
          iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
            - Effect: "Allow"
              Action:
                - "dynamodb:Query"
                - "dynamodb:UpdateItem"
              Resource:
                - "arn:aws:dynamodb:${self:provider.region}:*:table/Users"
                - "arn:aws:dynamodb:${self:provider.region}:*:table/Users/*"
      - type: AMAZON_DYNAMODB
        name: Tweets
        description: 'Tweets table'
        config:
          tableName: 'Tweets'
          iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
            - Effect: "Allow"
              Action:
                - "dynamodb:Query"
                - "dynamodb:UpdateItem"
                - "dynamodb:PutItem"
                - "dynamodb:DeleteItem"
              Resource:
                - "arn:aws:dynamodb:${self:provider.region}:*:table/Tweets"
                - "arn:aws:dynamodb:${self:provider.region}:*:table/Tweets/*"
    webpackIncludeModules: true

resources:
  Resources:
    AppSyncServiceRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: Lambda-AppSyncServiceRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'appsync.amazonaws.com'
                  - 'apigateway.amazonaws.com'
                  - 'lambda.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: Lambda-AppSyncServiceRole-Policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'lambda:invokeFunction'
                  Resource:
                    - '*'
    CognitoUserPoolUsers:
      Type: AWS::Cognito::UserPool
      DeletionPolicy: Retain
      Properties:
        UserPoolName: MyUserPool
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true
        UsernameAttributes:
          - email

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
          ClientName: "Web"
          GenerateSecret: false
          RefreshTokenValidity: 30
          UserPoolId: {Ref: CognitoUserPoolUsers}

    UserTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        KeySchema:
          -
            AttributeName: handle
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: handle
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: "Users"
    TweetsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        KeySchema:
          -
            AttributeName: tweet_id
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: tweet_id
            AttributeType: S
          -
            AttributeName: handle
            AttributeType: S
          -
            AttributeName: retweet_count
            AttributeType: N
          -
            AttributeName: created_at
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: "Tweets"
        GlobalSecondaryIndexes:
          -
            IndexName: top-index
            KeySchema:
              -
                AttributeName: handle
                KeyType: HASH
              -
                AttributeName: retweet_count
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 50
              WriteCapacityUnits: 50
          -
            IndexName: tweet-index
            KeySchema:
              -
                AttributeName: handle
                KeyType: HASH
              -
                AttributeName: created_at
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 50
              WriteCapacityUnits: 50
